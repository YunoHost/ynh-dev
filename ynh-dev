#!/bin/bash

###############################################################################
# Global variables                                                            #
###############################################################################

readonly IP_BASE="192.168.33."
readonly SCRIPT_NAME=`basename $0`
readonly KNOWN_PACKAGES="moulinette ssowat yunohost yunohost-admin"
readonly KNOWN_VERSIONS="stable testing unstable"
readonly BASE_INSIDE_VM="/vagrant"

###############################################################################
# Usage and options parsing                                                   #
###############################################################################

show_usage()
{
    cat <<- EOF
	Usage :

	    On the host
	    -----------

	        create-env PATH
	            Create a dev environment into PATH
	        run DOMAIN [VERSION]
	            Run a vagrant or virtualbox vm
	        kill
	            Kill all vagrant

	    Inside the vm
	    -------------

	        ip
	            Give the ip of the guest container
	        upgrade
	            Upgrade the container
	        use-git [PACKAGE [PACKAGE ...]]
	            Use Git repositories from dev environment path
	        test [PACKAGE [PACKAGE ...]]
	            Deploy, update and run tests for some packages
	        self-update
	            Update this script (${SCRIPT_NAME})

	# PACKAGES

	    moulinette
	    ssowat
	    yunohost
	    yunohost-admin

	# VERSIONS

	    stable
	    testing
	    unstable
	EOF
}

execute_action()
{
    local ACTION="$1"
    local ARGUMENTS="${@:2}"

    case "${ACTION}" in
        help|-h|--help)            show_usage  $ARGUMENTS ;;
        create-env|--create-env)   create_env  $ARGUMENTS ;;
        run|--run)                 run_vm      $ARGUMENTS ;;
        kill|--kill)               kill_vm     $ARGUMENTS ;;
        ip|--ip)                   show_vm_ip  $ARGUMENTS ;;
        upgrade|--upgrade)         upgrade_vm  $ARGUMENTS ;;
        use-git|--use-git)         use_git     $ARGUMENTS ;;
        test|--test)               run_tests   $ARGUMENTS ;;
        self-update|--self-update) self_update $ARGUMENTS ;;
        *)
            echo "Unknown action ${ACTION}."
            show_usage
            exit 100
            ;;
    esac
}

###############################################################################
# Helpers                                                                     #
###############################################################################

is_empty_string()
{
    [[ -z "$1" ]]
}

is_not_empty_string()
{
    [[ -n "$1" ]]
}

file_exists()
{
    [[ -e "$1" ]]
}

is_directory()
{
    [[ -d "$1" ]]
}

list_contains_element () {
    local LIST="$1"
    local ELEMENT_TO_FIND="$2"
    local ELEMENT
    for ELEMENT in ${LIST}; do
        [[ "$ELEMENT" == "$ELEMENT_TO_FIND" ]] && return 0;
    done
    return 1
}

assert_inside_yunohost_vm()
{
    is_directory "/etc/yunohost" || {
        echo "You are not inside a Yunohost instance. Maybe you need to install it first ?"
        exit 101;
    }
}

assert_package_is_known()
{
    local PACKAGE="$1"
    list_contains_element "$KNOWN_PACKAGES" "$PACKAGE" || {
        echo "ERROR: Incorrect package '$PACKAGE'. See '${SCRIPT_NAME} --help' for usage."
        exit 102
    }
}

assert_version_is_known()
{
    local VERSION="$1"
    list_contains_element "$KNOWN_VERSIONS" "$VERSION" || {
        echo "ERROR: Incorrect version '$VERSION'. See '${SCRIPT_NAME} --help' for usage."
        exit 103
    }
}

create_sym_link()
{
    # Remove current sources if not a symlink
    if [ ! -L '$2' ]; then
        sudo rm -rf $2
    fi
    # Symlink from Git repository
    sudo ln -sfn $1 $2
}



###############################################################################
# Create a development environment                                            #
###############################################################################

create_env()
{
    set -x

    local PATH_="$1"

    is_not_empty_string "$PATH_" \
        || { echo "I need a destination folder to create the dev environnement"
             exit 104 
    }

    file_exists "$PATH_" \
        || mkdir -p "$PATH_"

    cd "$PATH_"

    # Create apps & backup folder
    mkdir -p apps
    mkdir -p backup

    # Get YunoHost packages
    git clone -b unstable https://github.com/YunoHost/SSOwat ssowat
    git clone -b unstable https://github.com/YunoHost/yunohost-admin yunohost-admin
    git clone -b unstable https://github.com/YunoHost/yunohost yunohost
    git clone -b unstable https://github.com/YunoHost/moulinette moulinette

    # Get YunoHost Vagrantfile
    git clone -b master https://github.com/YunoHost/Vagrantfile vagrant
    ln -s vagrant/Vagrantfile Vagrantfile

    # Get YunoHost dev tools
    git clone -b master https://github.com/YunoHost/ynh-dev ynh-dev-tools
    cp ynh-dev-tools/ynh-dev ynh-dev
}

###############################################################################
# Run a vm and give a prompt                                                  #
###############################################################################

run_vm()
{
    local DOMAIN="$1"
    local VERSION="${2:-stable}" # (use $2, or "stable" by default)

    # Get vagrant box info from version
    local VMNAME="${DOMAIN//./_}"
    local BOX_NAME="yunohost/jessie-${VERSION}"
    local BOX_URL="https://build.yunohost.org/yunohost-jessie-${VERSION}.box"

    assert_version_is_known "$VERSION"

    echo "Creating $DOMAIN virtual machine with YunoHost $VERSION version"
    echo ""

    # Download box if not available
    if ! vagrant box list | grep -qc $BOX_NAME ; then
        echo "Vagrant box '$BOX_NAME' is missing. Trying to download it"
        vagrant box add $BOX_NAME $BOX_URL --provider virtualbox
        #[ $? -eq 0 ] || {
        #    echo "Download failed of $BOX_NAME from $BOX_URL failed !"
        #    exit 105
        #}
        echo ""
    fi

    # Add the vm vagrant config in Vagrantfile
    vagrant status $VMNAME &> /dev/null || {

        # Find an available ip
        for i in `seq 1 254`;
        do
            grep "${IP_BASE//./\.}$i" Vagrantfile &> /dev/null || {
                local IP="${IP_BASE}$i"
                break
            }
        done

        sed -i "/  ### END AUTOMATIC YNH-DEV ###/ i \\
  config.vm.define \"${VMNAME}\" do |${VMNAME}| \
\n    ${VMNAME}.vm.box = \"${BOX_NAME}\" \
\n    ${VMNAME}.vm.network :private_network, ip: \"${IP}\" \
\n  end \
\n" ./Vagrantfile
    }

    # Run VM
    vagrant up $VERSION --provider virtualbox

    # Warn user about hosts file
    local IP_LINE="\s\s*${VMNAME}.vm.network\s\s*:private_network,\s*ip:\s*\""
    local IP=$(grep "$IP_LINE" Vagrantfile | sed "s/${IP_LINE}//")
    IP=${IP::-1}
    echo "/!\ Please add '$IP $DOMAIN' to your /etc/hosts file /!\\"
    echo "sudo sh -s 'echo \"$IP $DOMAIN\" >> /etc/hosts'"
    echo ""

    # Log into the VM
    vagrant ssh $VERSION

}

###############################################################################
# Kill running VM                                                             #
###############################################################################

kill_vm()
{
    vagrant destroy
}

###############################################################################
# Upgrade current VM                                                          #
###############################################################################

upgrade_vm()
{
    assert_inside_yunohost_vm
    sudo apt-get update
    sudo apt-get -y upgrade
    sudo apt-get -y dist-upgrade
}

###############################################################################
# Get current VM IP                                                           #
###############################################################################

show_vm_ip()
{
    assert_inside_yunohost_vm
    # Print IP
    local ip=$(/bin/ip a | grep 'inet 192.168' | awk -F " " '{print $2}' | awk -F "/" '{print $1}')
    echo "IP: $ip"
}

###############################################################################
# Use Git version for YunoHost packages                                       #
###############################################################################

use_git()
{
    assert_inside_yunohost_vm
    PACKAGES="$@"

    is_not_empty_string "$PACKAGES" || PACKAGES=${KNOWN_PACKAGES}

    echo $PACKAGES

    local PACKAGE
    for PACKAGE in $PACKAGES; do
        echo $PACKAGE
        assert_package_is_known $PACKAGE
        case "$PACKAGE" in
            ssowat)
                echo "Using Git repository for SSOwat"
                create_sym_link "${BASE_INSIDE_VM}/ssowat" "/usr/share/ssowat"
                echo "↳ Don't forget to do 'sudo yunohost app ssowatconf' when hacking SSOwat"
                echo ""
                ;;
            moulinette)
                create_sym_link "${BASE_INSIDE_VM}/moulinette/locales" "/usr/share/moulinette/locale"
                create_sym_link "${BASE_INSIDE_VM}/moulinette/moulinette/authenticators" "/usr/lib/python2.7/dist-packages/moulinette/authenticator"
                create_sym_link "${BASE_INSIDE_VM}/moulinette/moulinette/interfaces" "/usr/lib/python2.7/dist-packages/moulinette/interfaces"
                create_sym_link "${BASE_INSIDE_VM}/moulinette/moulinette/utils" "/usr/lib/python2.7/dist-packages/moulinette/utils"
                create_sym_link "${BASE_INSIDE_VM}/moulinette/moulinette/__init__.py" "/usr/lib/python2.7/dist-packages/moulinette/__init__.py"
                create_sym_link "${BASE_INSIDE_VM}/moulinette/moulinette/core.py" "/usr/lib/python2.7/dist-packages/moulinette/core.py"
                create_sym_link "${BASE_INSIDE_VM}/moulinette/moulinette/actionsmap.py" "/usr/lib/python2.7/dist-packages/moulinette/actionsmap.py"
                echo "↳ If you add files at the root of this directory ${BASE_INSIDE_VM}/moulinette/moulinette/ you should adapt ynh-dev"
                echo ""
                ;;
            yunohost)
                echo "Using Git repository for yunohost"

                # bin
                create_sym_link "${BASE_INSIDE_VM}/yunohost/bin/yunohost" "/usr/bin/yunohost"
                create_sym_link "${BASE_INSIDE_VM}/yunohost/bin/yunohost-api" "/usr/bin/yunohost-api"

                # data
                create_sym_link "${BASE_INSIDE_VM}/yunohost/data/bash-completion.d/yunohost" "/etc/bash_completion.d/yunohost"
                create_sym_link "${BASE_INSIDE_VM}/yunohost/data/actionsmap/yunohost.yml" "/usr/share/moulinette/actionsmap/yunohost.yml"
                create_sym_link "${BASE_INSIDE_VM}/yunohost/data/hooks" "/usr/share/yunohost/hooks"
                create_sym_link "${BASE_INSIDE_VM}/yunohost/data/templates" "/usr/share/yunohost/templates"
                create_sym_link "${BASE_INSIDE_VM}/yunohost/data/helpers" "/usr/share/yunohost/helpers"
                create_sym_link "${BASE_INSIDE_VM}/yunohost/data/helpers.d" "/usr/share/yunohost/helpers.d"
                create_sym_link "${BASE_INSIDE_VM}/yunohost/data/other" "/usr/share/yunohost/yunohost-config/moulinette"

                # debian
                create_sym_link "${BASE_INSIDE_VM}/yunohost/debian/conf/pam/mkhomedir" "/usr/share/pam-configs/mkhomedir"

                # lib
                create_sym_link "${BASE_INSIDE_VM}/yunohost/lib/metronome/modules/ldap.lib.lua" "/usr/lib/metronome/modules/ldap.lib.lua"
                create_sym_link "${BASE_INSIDE_VM}/yunohost/lib/metronome/modules/mod_auth_ldap2.lua" "/usr/lib/metronome/modules/mod_auth_ldap2.lua"
                create_sym_link "${BASE_INSIDE_VM}/yunohost/lib/metronome/modules/mod_legacyauth.lua" "/usr/lib/metronome/modules/mod_legacyauth.lua"
                create_sym_link "${BASE_INSIDE_VM}/yunohost/lib/metronome/modules/mod_storage_ldap.lua" "/usr/lib/metronome/modules/mod_storage_ldap.lua"
                create_sym_link "${BASE_INSIDE_VM}/yunohost/lib/metronome/modules/vcard.lib.lua" "/usr/lib/metronome/modules/vcard.lib.lua"

                # src
                create_sym_link "${BASE_INSIDE_VM}/yunohost/src/yunohost" "/usr/lib/moulinette/yunohost"

                # locales
                create_sym_link "${BASE_INSIDE_VM}/yunohost/locales" "/usr/lib/moulinette/yunohost/locales"

                echo ""
                ;;
            yunohost-admin)

                # Trick to check vagrant user exists (for install on VPS..)
                getent passwd vagrant > /dev/null
                if [ $? -eq 2 ]; then
                    useradd vagrant
                    chown -R vagrant: ${BASE_INSIDE_VM}/yunohost-admin
                fi

                # Install npm dependencies if needed
                which gulp > /dev/null
                if [ $? -eq 1 ]
                then
                    sudo apt-get update --fix-missing
                    sudo apt-get -y install nodejs-legacy npm
                    cd ${BASE_INSIDE_VM}/yunohost-admin/src
                    sudo npm install
                    sudo npm install -g bower
                    sudo npm install -g gulp
                fi
                cd ${BASE_INSIDE_VM}/yunohost-admin/src
                sudo su -c "bower install" vagrant
                sudo su -c "gulp build --dev" vagrant

                echo "Using Git repository for yunohost-admin"
                create_sym_link "${BASE_INSIDE_VM}/yunohost-admin/src" "/usr/share/yunohost/admin"

                echo "--------------------------------------------------------"
                echo "Launching gulp ... "
                echo "NB : This command will keep running and watch for changes"
                echo " in the folder ${BASE_INSIDE_VM}/yunohost-admin/src, such that you"
                echo "don't need to re-run npm yourself everytime you change"
                echo "something !"
                echo "--------------------------------------------------------"
                sudo su -c "gulp watch --dev" vagrant

                ;;
        esac
    done
}

###############################################################################
# Run tests for a given package                                               #
###############################################################################

readonly PIP_DEPENDENCIES_FOR_TESTS="pytest-mock requests-mock"

install_or_update_test_dependencies()
{
    # Pytest
    if ! type "pytest" > /dev/null; then
        echo "======================="
        echo "> Installing pytest ..."
        echo "======================="
        apt-get install python-pip
        pip2 install pytest
    fi
    for DEP in "$PIP_DEPENDENCIES_FOR_TESTS"
    do
        # Install this dependency if it's not already there
        is_not_empty_string "$(pip show $DEP)" || {
            echo "======================="
            echo "Installing $DEP with pip"
            echo "======================="
            pip2 install $DEP
        }
    done

    # Apps for test
    cd ${BASE_INSIDE_VM}/yunohost/src/yunohost/tests
    if [ ! -d "apps" ]; then
        git clone https://github.com/YunoHost/test_apps ./apps
    else
        cd apps
        git pull > /dev/null 2>&1
    fi
}

run_tests()
{
    PACKAGES="$@"

    assert_inside_yunohost_vm
    install_or_update_test_dependencies
    is_not_empty_string "$PACKAGES" || PACKAGES=${KNOWN_PACKAGES}

    for PACKAGE in $PACKAGES; do
        assert_package_is_known $PACKAGE
        echo "Running tests for $PACKAGE"
        case "$PACKAGE" in
            yunohost)
                # Run tests
                cd ${BASE_INSIDE_VM}/yunohost/
                py.test tests
                cd ${BASE_INSIDE_VM}/yunohost/src/yunohost
                py.test tests
                ;;
        esac
    done
}

###############################################################################
# Self-update                                                                 #
###############################################################################

self_update()
{
    assert_inside_yunohost_vm
    cd ${BASE_INSIDE_VM}/vagrant && git pull origin master
    cd ${BASE_INSIDE_VM}/ynh-dev-tools && git pull origin master && cp ynh-dev ../ynh-dev
}

###############################################################################
# Main                                                                        #
###############################################################################

main()
{
    local ACTION="$1"
    local ARGUMENTS="${@:2}"

    execute_action "$ACTION" "$ARGUMENTS"
}

main "$@"
